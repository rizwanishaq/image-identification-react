{"version":3,"sources":["contexts/appContext.js","components/DisplayPrediction.js","components/FileUpload.js","components/Header.js","App.js","index.js"],"names":["GlobalContext","createContext","AppContext","useContext","GlobalContextProvider","children","useState","isModelLoading","setIsModelLoading","model","setModel","imageURL","setImageURL","results","setResults","history","setHistory","imageRef","useRef","textInputRef","fileInputRef","loadModel","a","mobilenet","console","log","useEffect","Provider","value","DisplayPrediction","identify","current","classify","className","src","alt","crossOrigin","ref","length","map","result","index","probability","toFixed","onClick","FileUpload","type","accept","capture","onChange","e","files","target","url","URL","createObjectURL","click","placeholder","Header","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e493023f.chunk.js","sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useRef,\n  useEffect,\n  useState,\n} from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\n\nconst GlobalContext = createContext();\n\nexport const AppContext = () => {\n  return useContext(GlobalContext);\n};\n\nconst GlobalContextProvider = ({ children }) => {\n  const [isModelLoading, setIsModelLoading] = useState(false);\n  const [model, setModel] = useState(null);\n  const [imageURL, setImageURL] = useState(null);\n  const [results, setResults] = useState([]);\n  const [history, setHistory] = useState([]);\n\n  const imageRef = useRef();\n  const textInputRef = useRef();\n  const fileInputRef = useRef();\n\n  const loadModel = async () => {\n    setIsModelLoading(true);\n    try {\n      const model = await mobilenet.load();\n      setModel(model);\n      setIsModelLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsModelLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadModel();\n  }, []);\n  useEffect(() => {\n    if (imageURL) {\n      setHistory([imageURL, ...history]);\n    }\n    // eslint-disable-next-line\n  }, [imageURL]);\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        model,\n        isModelLoading,\n        imageURL,\n        setImageURL,\n        results,\n        setResults,\n        history,\n        setHistory,\n        imageRef,\n        textInputRef,\n        fileInputRef,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\nexport default GlobalContextProvider;\n","import React from \"react\";\nimport { AppContext } from \"../contexts/appContext\";\n\nconst DisplayPrediction = () => {\n  const { textInputRef, model, imageRef, setResults, imageURL, results } =\n    AppContext();\n\n  const identify = async () => {\n    textInputRef.current.value = \"\";\n    const results = await model.classify(imageRef.current);\n    setResults(results);\n  };\n\n  return (\n    <div className=\"mainWrapper\">\n      <div className=\"mainContent\">\n        <div className=\"imageHolder\">\n          {imageURL && (\n            <img\n              src={imageURL}\n              alt=\"Upload Preview\"\n              crossOrigin=\"anonymous\"\n              ref={imageRef}\n            />\n          )}\n        </div>\n        {results.length > 0 && (\n          <div className=\"resultsHolder\">\n            {results.map((result, index) => {\n              return (\n                <div className=\"result\" key={result.className}>\n                  <span className=\"name\">{result.className}</span>\n                  <span className=\"confidence\">\n                    Confidence level: {(result.probability * 100).toFixed(2)}%{\" \"}\n                    {index === 0 && (\n                      <span className=\"bestGuess\">Best Guess</span>\n                    )}\n                  </span>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n      {imageURL && (\n        <button className=\"button\" onClick={identify}>\n          Identify Image\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default DisplayPrediction;\n","import React from \"react\";\nimport { AppContext } from \"../contexts/appContext\";\n\nconst FileUpload = () => {\n  const { textInputRef, fileInputRef, setImageURL, setResults } = AppContext();\n\n  const uploadImage = (e) => {\n    const { files } = e.target;\n    if (files.length > 0) {\n      const url = URL.createObjectURL(files[0]);\n      setImageURL(url);\n    } else {\n      setImageURL(null);\n    }\n  };\n\n  const triggerUpload = () => {\n    fileInputRef.current.click();\n  };\n\n  const handleOnChange = (e) => {\n    setImageURL(e.target.value);\n    setResults([]);\n  };\n\n  return (\n    <div className=\"inputHolder\">\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        capture=\"camera\"\n        className=\"uploadInput\"\n        onChange={uploadImage}\n        ref={fileInputRef}\n      />\n      <button className=\"uploadImage\" onClick={triggerUpload}>\n        Upload Image\n      </button>\n      <span className=\"or\">OR</span>\n      <input\n        type=\"text\"\n        placeholder=\"Paster image URL\"\n        ref={textInputRef}\n        onChange={handleOnChange}\n      />\n    </div>\n  );\n};\n\nexport default FileUpload;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <>\n      <h1 className=\"header\">Image Identification</h1>\n    </>\n  );\n};\n\nexport default Header;\n","import DisplayPrediction from \"./components/DisplayPrediction\";\nimport FileUpload from \"./components/FileUpload\";\nimport Header from \"./components/Header\";\n// import ImageHistory from \"./components/ImageHistory\";\nimport { AppContext } from \"./contexts/appContext\";\n\nfunction App() {\n  const { isModelLoading } = AppContext();\n\n  if (isModelLoading) {\n    return <h2>Model Loading...</h2>;\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <FileUpload />\n      <DisplayPrediction />\n      {/* <ImageHistory /> */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport GlobalContextProvider from \"./contexts/appContext\";\n\nReactDOM.render(\n  <GlobalContextProvider>\n    <App />\n  </GlobalContextProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}